package main

import (
	"fmt"
)

func main() {
	fmt.Println(cal("7+3*1*2"))
	fmt.Println(cal("3*3*2+2*5+0*0+1*6+0*4+4*0+2*2"))
	fmt.Println(cal("3*0+2*2"))
	fmt.Println(cal("3*0*2*2"))
	fmt.Println(cal("9*3+2*2"))
	fmt.Println(cal("9"))
	fmt.Println(scoreOfStudents("3*3*2+2*5+0*0+1*6+0*4+4*0+2*2", []int{38, 838, 796, 914, 214, 38, 420, 673, 492, 874, 38, 38, 386, 38, 319, 38, 960, 208, 154, 402, 742, 888, 466, 38, 602, 49, 38, 38, 588, 142, 700, 274, 394, 125, 98, 660, 126, 38, 972, 940, 935, 670, 38, 119, 786, 38, 612, 345, 38, 934, 38, 38, 38, 38, 38, 152, 38, 758, 38, 969, 96, 702, 76, 742, 673, 38, 467, 118, 475, 38, 480, 38, 273, 445, 38, 929, 38, 38, 118, 382, 38, 38, 76, 326, 38, 38, 38, 909, 475, 126, 739, 884, 519, 642, 972, 87, 222, 244, 242, 38, 392, 514, 726, 154, 38, 30, 65, 204, 360, 390, 630, 38, 594, 726, 546, 248, 38, 38, 38, 78, 38, 132, 564, 506, 38, 656, 38, 38, 904, 714, 102, 618, 412, 774, 402, 720, 38, 38, 67, 496, 280, 38, 600, 594, 786, 38, 676, 404, 948, 38, 38, 196, 38, 267, 660, 43, 477, 769, 38, 659, 194, 961, 57, 38, 456, 645, 38, 38, 38, 38, 684, 812, 618, 620, 38, 772, 38, 833, 38, 826, 312, 458, 487, 166, 114, 378, 220, 744, 180, 296, 38, 454, 136, 492, 944, 132, 38, 856, 131, 413, 357, 38, 568, 1000, 954, 38, 584, 972, 38, 869, 252, 574, 68, 541, 38, 38, 38, 4, 248, 264, 564, 38, 38, 786, 954, 38, 38, 38, 38, 971, 38, 38, 994, 858, 38, 38, 38, 38, 562, 154, 912, 930, 524, 38, 372, 147, 160, 414, 38, 978, 73, 38, 996, 38, 730, 862, 268, 641, 38, 38, 146, 612, 666, 866, 758, 38, 494, 828, 215, 274, 38, 16, 284, 530, 942, 38, 347, 46, 856, 38, 816, 502, 883, 882, 258, 286, 588, 996, 616, 89, 38, 466, 38, 486, 748, 573, 708, 492, 496, 261, 167, 38, 18, 288, 732, 336, 612, 38, 196, 38, 138, 552, 170, 129, 32, 560, 496, 141, 792, 964, 841, 612, 596, 680, 342, 38, 390, 965, 565, 38, 154, 38, 233, 534, 172, 835, 38, 173, 38, 38, 319, 584, 140, 336, 119, 976, 834, 20, 286, 38, 38, 80, 38, 304, 814, 563, 38, 45, 38, 92, 4, 38, 343, 38, 233, 38, 38, 191, 102, 122, 682, 114, 792, 38, 38, 38, 176, 38, 38, 840, 850, 596, 344, 38, 38, 38, 648, 138, 344, 38, 742, 38, 270, 878, 38, 38, 22, 38, 62, 38, 639, 38, 618, 612, 260, 38, 422, 15, 974, 110, 123, 578, 60, 38, 38, 967, 273, 38, 92, 38, 117, 38, 38, 441, 901, 38, 736, 38, 104, 38, 130, 849, 176, 598, 102, 38, 975, 66, 38, 285, 948, 616, 3, 38, 38, 738, 918, 484, 22, 38, 330, 538, 706, 38, 595, 490, 382, 38, 196, 602, 95, 166, 660, 38, 188, 38, 670, 624, 400, 676, 38, 682, 152, 726, 379, 404, 339, 530, 38, 350, 643, 805, 453, 872, 592, 38, 30, 720, 98, 904, 154, 484, 566, 38, 38, 290, 843, 388, 38, 68, 552, 324, 501, 577, 172, 38, 38, 762, 271, 276, 38, 716, 274, 832, 38, 36, 954, 38, 395, 466, 38, 224, 858, 684, 38, 373, 38, 606, 338, 671, 456, 38, 484, 38, 508, 680, 750, 492, 38, 101, 373, 38, 38, 38, 509, 164, 292, 919, 208, 773, 38, 218, 440, 38, 404, 76, 38, 664, 920, 326, 460, 796, 602, 930, 772, 682, 510, 244, 38, 38, 38, 612, 574, 38, 648, 598, 38, 38, 70, 38, 767, 753, 38, 590, 38, 60, 329, 576, 38, 354, 38, 381, 38, 684, 38, 577, 38, 38, 38, 38, 911, 454, 918, 274, 594, 570, 520, 38, 928, 690, 236, 181, 406, 38, 38, 204, 38, 606, 800, 540, 38, 854, 180, 920, 418, 38, 657, 38, 38, 755, 141, 38, 594, 226, 38, 38, 390, 38, 449, 38, 38, 26, 544, 38, 38, 38, 679, 38, 600, 69, 30, 38, 64, 130, 322, 38, 202, 38, 62, 706, 925, 180, 38, 742, 544, 977, 170, 38, 38, 944, 38, 74, 846, 38, 38, 559, 248, 596, 38, 822, 38, 62, 264, 420, 677, 63, 702, 477, 38, 38, 154, 182, 359, 38, 891, 38, 88, 38, 25, 857, 971, 353, 38, 700, 528, 26, 396, 38, 38, 964, 760, 376, 38, 23, 400, 38, 980, 424, 55, 38, 816, 162, 166, 38, 996, 202, 774, 931, 128, 454, 436, 38, 932, 224, 38, 38, 38, 38, 38, 50, 724, 191, 38, 130, 148, 864, 38, 372, 564, 160, 845, 38, 38, 38, 886, 38, 966, 38, 495, 38, 622, 528, 491, 176, 411, 506, 38, 413, 739, 724, 38, 602, 496, 309, 366, 512, 172, 522, 96, 730, 228, 991, 593, 456, 412, 38, 994, 38, 852, 38, 942, 38, 657, 953, 396, 34, 916, 38, 38, 606, 38, 38, 652, 38, 258, 940, 280, 154, 38, 38, 848, 560, 38, 802, 385, 940, 38, 863, 74, 204, 44, 38, 894, 468, 696, 336, 690, 38, 38, 38, 38, 38, 296, 340, 38, 996, 310, 400, 157, 50, 923, 416, 627, 156, 38, 38, 38, 100, 963, 676, 357, 13, 38, 38, 38, 848, 756, 525, 876, 880, 226, 868, 563, 38, 38, 711, 329, 38, 894, 38, 456, 680, 628, 939, 458, 38, 38, 38, 316, 631, 16, 970, 620, 396, 598, 417, 38, 286, 38, 689, 38, 664, 70, 708, 162, 490, 876, 102, 400, 144, 38, 38, 780, 748, 942, 38, 354, 848, 230, 38, 408, 618, 474, 38, 294, 445, 38, 56, 38, 268, 198, 534, 52, 38, 530, 125, 385, 340, 163, 80, 38, 38, 38, 310, 176, 38, 402, 38, 329, 540, 622, 914, 639, 832, 882, 392, 80, 192, 744, 38, 96, 541, 70, 940, 38, 266, 80, 38, 514, 86, 38, 238, 38, 928, 38, 822, 201, 816, 38, 345, 38, 957, 38, 625, 108, 38, 877, 872, 998, 858, 313, 412, 256, 812, 38, 38, 203, 82, 62, 38, 424, 38, 992, 568, 963, 304, 571, 38, 38, 38, 223, 182, 421, 85, 160, 210, 38, 616, 38, 136, 38, 300, 421, 604, 76, 54, 388, 759, 382, 996, 504, 504, 864, 38, 804, 262, 38, 24, 604, 38, 600, 638, 232, 38, 34, 240, 38, 940, 528, 304, 182, 480, 474, 454, 642, 38, 402, 153, 38, 38, 38, 60, 352, 18, 364, 460, 38, 38, 556, 558, 86, 658, 602, 788, 856, 920, 328, 38, 220, 38, 314, 848, 360, 304, 38, 997, 38, 858, 759, 38, 38, 876, 965, 38, 810, 292, 38, 656, 255, 108, 38, 747, 322, 103, 38, 521, 38, 38, 38, 428, 116, 506, 944, 38, 116, 446, 188, 954, 316, 338, 671, 38, 480, 474, 122, 38, 38, 38, 122, 273, 708, 32, 38, 960, 38, 116, 38, 756, 599, 6, 330, 690, 38, 830, 964, 204, 38, 38, 38, 386, 552, 368, 4, 544, 48, 690, 38, 38, 180, 345, 376, 408, 68, 38, 939, 38, 38, 216, 38, 780, 112, 351, 270, 54, 272, 602, 38, 367, 108, 38, 38, 314, 364, 38, 696, 192, 38, 501, 620, 38, 868, 588, 270, 38, 726, 612, 112, 340, 900, 15, 38, 193, 992, 324, 38, 594, 504, 16, 291, 960, 949, 318, 988, 38, 81, 592}))
}

func scoreOfStudents(s string, answers []int) int {
	ok := cal(s)
	mem := make(map[string]map[int]bool)
	notOK := cal2([]byte(s), mem)
	notOK[ok] = false

	ans := 0
	for _, ch := range answers {
		if ch == ok {
			ans += 5
		} else if notOK[ch] {
			ans += 2
		}
	}

	return ans
}

func cal(s string) int {
	if s == "" {
		return 0
	}
	st := []int{0}
	op := '+'
	for _, ch := range s {
		if ch == '+' {
			op = '+'
			continue
		}
		if ch == '*' {
			op = '*'
			continue
		}
		// 表达式中所有整数运算数字都在闭区间 [0, 9] 以内。
		// 所以可以直接算
		num := int(ch) - int('0')
		if op == '+' {
			st = append(st, num)
		} else if op == '*' {
			last := st[len(st)-1]
			st = st[:len(st)-1]
			st = append(st, last*num)
			op = '+'
		}
	}
	ans := 0
	for _, ch := range st {
		ans += ch
	}
	return ans
}

func cal2(ss []byte, mem map[string]map[int]bool) map[int]bool {
	if len(ss) == 0 {
		return map[int]bool{}
	}
	if len(ss) == 1 {
		return map[int]bool{int(ss[0]) - int('0'): true}
	}
	if v, ok := mem[string(ss)]; ok {
		return v
	}
	ans := make(map[int]bool)
	for i, ch := range ss {
		if ch == '+' || ch == '*' {
			left := cal2(ss[:i], mem)
			right := cal2(ss[i+1:], mem)
			for l := range left {
				for r := range right {
					if ch == '+' && l+r <= 1000 {
						ans[l+r] = true
					}
					if ch == '*' && l*r <= 1000 {
						ans[l*r] = true
					}
				}
			}

		}
	}
	mem[string(ss)] = ans
	return ans
}
