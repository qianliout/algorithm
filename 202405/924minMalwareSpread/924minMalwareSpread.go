package main

import (
	"fmt"
	"sort"
)

func main() {
	// graph := [][]int{{1, 1, 0}, {1, 1, 0}, {0, 0, 1}}
	// fmt.Println(minMalwareSpread(graph, []int{0, 1}))
	// fmt.Println(minMalwareSpread([][]int{{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, []int{2, 0}))
	fmt.Println(minMalwareSpread([][]int{{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 1}, {0, 0, 1, 1}}, []int{3, 1}))
}

// 所以我们要找的是只包含一个被感染节点的连通块，并且这个连通块越大越好。
func minMalwareSpread(graph [][]int, initial []int) int {
	sort.Ints(initial)
	ini := make(map[int]bool)
	for _, ch := range initial {
		ini[ch] = true
	}
	n := len(graph)
	g := make([][]int, n)
	for i := 0; i < n; i++ {
		for j := i + 1; j < n; j++ {
			if graph[i][j] == 0 {
				continue
			}
			g[i] = append(g[i], j)
			g[j] = append(g[j], i)
		}
	}

	mx := 0
	idx := initial[0]
	for _, i := range initial {
		visit := make([]bool, n)
		cnt, used := dfs(g, ini, i, visit)
		if used == 1 && cnt > mx {
			mx = cnt
			idx = i
		}
	}
	return idx
}

// 返回，联通块的大小，和在initial 中节点数
func dfs(g [][]int, ini map[int]bool, x int, visit []bool) (int, int) {
	visit[x] = true
	a, b := 1, 0
	if ini[x] {
		b++
	}
	nex := g[x]
	for _, ch := range nex {
		if visit[ch] {
			continue
		}
		a++
		if ini[ch] {
			b++
		}
		visit[ch] = true
		i1, i2 := dfs(g, ini, ch, visit)
		a += i1
		b += i2
	}
	return a, b
}
