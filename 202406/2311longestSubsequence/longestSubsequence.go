package main

import (
	"fmt"
	"math"
	"math/bits"
	"strings"
)

func main() {
	fmt.Println(longestSubsequencemath.MaxInt))
	fmt.Println(longestSubsequence("00101001", 1))
	fmt.Println(int('a'), int('A'))
}

// 贪心
func longestSubsequence(s string, k int) int {
	n := len(s)
	m := bits.Len(uint(k))
	res := strings.Count(s, "0")
	num := 0
	for i := n - 1; i >= 0; i-- {
		if s[i] == '1' {
			// python语言可以不写 n-i+1>m，但是 golang 不可以，因为要越界
			if n-i-1 > m || num+(1<<(n-i-1)) > k {
				break
			}
			res++ // 也就是说这个 1可以取
			num = num + (1 << (n - i - 1))
		}
	}
	return res
}

func greatestLetter(s string) string {
	ans := ""
	cnt := make(map[byte]int)
	for i, ch := range s {
		cnt[byte(ch)] = i
	}
	for _, ch := range s {
		if ch >= 'A' && ch <= 'Z' {
			if cnt[byte(ch+(87-65))] > 0 {
				if ans == "" || string(ch) > ans {
					ans = string(ch)
				}
			}
		}
	}
	return ans
}
